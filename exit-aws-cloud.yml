trigger:
  - none

pool:
  vmImage: ubuntu-latest

variables:
- name: Environment
  ${{ if startsWith(variables['Build.SourceBranchName'], 'release')}}: 
    value: prod
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}: 
    value: prod    
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}: 
    value: dev
  ${{ if contains(variables['Build.SourceBranchName'], 'tag')}}: 
    value: dev      


stages:
  - stage: 
    displayName: 'Test and Validation'
    jobs:
      - job: 
        # condition: in(variables.Environment, 'dev', 'prod', 'acc')
        continueOnError: false
        steps:

          - task: Bash@3
            displayName: 'Pipeline info'
            inputs:
              targetType: 'inline'
              script: |
                echo 'Environment:' ${{variables.environment}}
                echo 'BuildId: ' $(Build.BuildId)
                echo 'SourceBranchName:' $(Build.SourceBranchName)
          - task: TerraformInstaller@0
            displayName: 'Install TF'
            continueOnError: false
            inputs:
              terraformVersion: '0.14.8'  

#----------------- VPC validation
          - task: TerraformTaskV1@0
            displayName: 'Init TF to validate VPC'
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/vpc'
              backendServiceAWS: 'aws-sample-connection'
              backendAWSBucketName: 'terraform-aws-sample-${{variables.Environment}}-euc1'
              backendAWSKey: "solution/vpc/terraform.tfstate"

          - task: TerraformTaskV1@0
            displayName: 'Validate VPC'
            inputs:
              provider: 'aws'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/vpc'
              commandOptions: '-var "region_short_name=$(region_short_name)" -var "costcenter=$(costcenter)" -var "projectname=$(projectname)" -var "environment=${{variables.environment}}" '

#----------------- Cognito validation
          - task: TerraformTaskV1@0
            displayName: 'Init TF to validate Cognito'
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/cognito'
              backendServiceAWS: 'aws-sample-connection'
              backendAWSBucketName: 'terraform-aws-sample-${{variables.Environment}}-euc1'
              backendAWSKey: "solution/cognito/terraform.tfstate"

          - task: TerraformTaskV1@0
            displayName: 'Validate Cognito'
            inputs:
              provider: 'aws'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/cognito'
              commandOptions: '-var "region_short_name=$(region_short_name)" -var "costcenter=$(costcenter)" -var "projectname=$(projectname)" -var "environment=${{variables.environment}}" '

#-----------------------------------------------------------------------------------------------------------------------------------
  - stage: 
    displayName: 'Destroy'
    condition: and(succeeded(), in(variables.Environment, 'dev', 'prod', 'acc'))
    jobs:
      - job: 
        continueOnError: false
        steps:

          - task: TerraformInstaller@0
            displayName: 'Install TF'
            continueOnError: false
            inputs:
              terraformVersion: '0.14.8'

#----------------- vpc
          - task: TerraformTaskV1@0
            displayName: 'Init TF to deploy vpc'
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/vpc'
              backendServiceAWS: 'aws-sample-connection'
              backendAWSBucketName: 'terraform-aws-sample-${{variables.Environment}}-euc1'
              backendAWSKey: "solution/vpc/terraform.tfstate"
                           
          - task: TerraformTaskV1@0
            displayName: 'Deploy vpc'
            inputs:
              provider: 'aws'
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/vpc'
              commandOptions: '-var "region_short_name=$(region_short_name)" -var "costcenter=$(costcenter)" -var "projectname=$(projectname)" -var "environment=${{variables.environment}}" '
              environmentServiceNameAWS: 'aws-sample-connection'                   

#----------------- Cognito
          - task: TerraformTaskV1@0
            displayName: 'Init TF to deploy Cognito'
            inputs:
              provider: 'aws'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/cognito'
              backendServiceAWS: 'aws-sample-connection'
              backendAWSBucketName: 'terraform-aws-sample-${{variables.Environment}}-euc1'
              backendAWSKey: "solution/cognito/terraform.tfstate"
                           
          - task: TerraformTaskV1@0
            displayName: 'Deploy Cognito'
            inputs:
              provider: 'aws'
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution/cognito'
              commandOptions: '-var "region_short_name=$(region_short_name)" -var "costcenter=$(costcenter)" -var "projectname=$(projectname)" -var "environment=${{variables.environment}}" '
              environmentServiceNameAWS: 'aws-sample-connection'                   

